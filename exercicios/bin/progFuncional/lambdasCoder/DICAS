DICAS:

RESUMO Interfaces funcionais:

SUPPLIER 			 NADA -> T
CONSUMER			    T -> NADA
PREDICATE		 	    T -> boolean
UNARY OPERATOR		    T -> T (os dois do mesmo tipo)
BINARY OPERATOR		(T,T) -> T (os dois do mesmo tipo)
FUNCTION			    S -> T (os dois de tipos diferentes)
BIFUNCTION		    (T,U) -> R (todos de tipos diferentes)

INTERFACES FUNCIONAIS:

@FunctionalInterface //nao é obrigatorio. Ele só impede de vc declarar mais de um met abstrato na interface!
public interface Calculo {

	//Mostrando que posso ter metodos Default e estatico numa interface funcional!!
	
	double executar(double a, double b); //Esperando o lambda implementar!!
	
	default String legal() {
		return "legal";
	}
	
	static String muitoLegal() {
		return "Muito legal";
	}
}

public class CalculoTeste {

	public static void main(String[] args) {
		
		Calculo soma = (a,b) -> a + b; //lambda implementando o metodo indiretamente
		System.out.println(soma.executar(2, 3));
		
		System.out.println(soma.legal());
		System.out.println(Calculo.muitoLegal());
	}
}

USANDO INTERFACE FUNCIONAL DO JAVA E LAMBDA, IREMOS SUBSTITUIR ESSAS DUAS CLASSES ACIMA:

public class CalculoTeste2 {

	public static void main(String[] args) {
		//Somando dois valores igual do metodo da interface, porém usando uma interface funcional padrao do Java!
		//O <T> diz qual TIPO de parametro que quero usar!!

		BinaryOperator<Double> calc = (x,y) -> x + y; //Sobrescrevendo o met apply()!
		System.out.println(calc.apply(2.0, 3.0));
		
		calc = (x,y) -> x * y;
		System.out.println(calc.apply(2.0,3.0));
		
		//Com isso, nao preciso criar varios metodos ou subclasses ou interfaces para
		//executar essa operacao de somar, multiplicar, etc. Nessa interface funcional,
		//consigo realizar qualquer operacao com dois operandos, que dai crio as lambdas
		//de acordo com as operacoes matematicas que eu quero!!!
		
		//O BinaryOperator<T> realiza operacoes com dois parametros do MESMO tipo!!
		//Posso fazer com ele tambem, pegar duas listas e retornar uma nova lista,
		//receber duas strings e concatenar elas, etc.		
	}
}

INTERFACES FUNCIONAIS DO JAVA:

SUPPLIER:

public static void main(String[] args) {
		
	SUPPLIER 			 NADA -> T
	//Supplier<T> nao tem entrada, porém retorna algo.
		
	Supplier<List<String>> umLista = 
			() -> Arrays.asList("Ana", "Bia", "Lia", "Gui");
			
	Supplier<Double> numsAleatorios =
							() -> Math.random();
		
	System.out.println(umLista.get());
}

CONSUMER:

public class Produto {
	
	final String nome;
	final double preco;
	final double desconto;
	
	public Produto(String nome, double preco, double desconto) {
		this.nome = nome;
		this.preco = preco;
		this.desconto = desconto;
	}
...
}

public class Consumidor {

	public static void main(String[] args) {
		
		//CONSUMER			    T -> NADA
		//Consumer<T> tem entrada algum valor(qlq tipo) e nao retorna nada!!
		
		Consumer<Produto> imprimir = p -> System.out.println(p.nome);

		Produto p1 = new Produto("Caneta", 12.54, 0.09);
		imprimir.accept(p1); //IMPRIME APENAS UM OBJETO!!
		
		Produto p2 = new Produto("Notebook", 3800.00, 0.15);
		Produto p3 = new Produto("Caderno", 20.00, 0.15);
		Produto p4 = new Produto("Borracha", 2.00, 0.15);
		Produto p5 = new Produto("lapis", 4.00, 0.15);
		
		List<Produto> produtos = Arrays.asList(p1,p2,p3,p4,p5);
		
		produtos.forEach(imprimir); //USANDO FOREACH DO ITERABLE
		//outro modo:
		produtos.forEach(p -> System.out.println(p.nome)); //USANDO O LAMBDA DIRETO NO PARAM
		//outro modo:
		produtos.forEach(System.out::println); //USANDO METHOD REFERENCE NO PARAM

		//Pode atrelar o lambda a uma função criada pelo usuario:

		System.out.println("\nLambda v 2.0");
		aprovados.forEach(nome -> meuImprimir(nome)); //funcao do usuario usando Lambda!
		
		System.out.println("\nMethod Reference...");
		aprovados.forEach(Foreach::meuImprimir);      //funcao do usuario usando reference method!

		static void meuImprimir(String nome) {
		System.out.println("Oi! Meu nome é " + nome);
		}
	}
}

METODOS CONSUMER:

Consumer<Produto> imprimir = p -> System.out.println(p.nome);

imprimir.accept(p1) = executa a operação para um objeto p1.
imprimir.andThen(after) = recebe outro Consumer "after" para ser executado depois do imprimir.

PREDICATE:

public static void main(String[] args) {
		
	//PREDICATE		 	    T -> boolean
	//Predicate<T> entrada dele é qlq tipo e a saida retorna um booleano!
		
	Predicate<Produto> isCaro = prod -> (prod.preco * (1 - prod.desconto)) >= 750;
	Produto p = new Produto("Notebook", 3890.90, 0.85);
	System.out.println(isCaro.test(p));
}

METODOS PREDICATE:

isCaro.test(p) = executa a operação do Predicate.
isCaro.and(other) = recebe outro Predicate "other" usando o AND (E).
isCaro.or(other) = recebe outro Predicate "other" usando o OR (OU).
isCaro.negate() = retorna a negacao do resultado do isCaro.

UNARY OPERATOR:

public static void main(String[] args) {
		
	//UNARY OPERATOR		    T -> T (os dois do mesmo tipo)
	//Pode ser muito usado quando:
	//recebe um numero, retorna um cliente;
	//recebe uma lista e retorna uma outra lista;
		
	UnaryOperator<Integer> maisDois = n -> n + 2;
	UnaryOperator<Integer> vezesDois = n -> n * 2;
	UnaryOperator<Integer> aoQuadrado = n -> n * n;
		
	int resultado1 = maisDois.andThen(vezesDois).andThen(aoQuadrado).apply(0);
	
	System.out.println(resultado1);
		
	int resultado2 = aoQuadrado.compose(vezesDois).compose(maisDois).apply(0);
		
	System.out.println(resultado2);
}

METODOS UNARY OPERATOR:

maisDois.andThen(vezesDois).apply(0) = Executa o lambda "maisDois", gera o resultado, esse resultado vira entrada para o 
					outro lambda "vezesDois" e depois gera o resultado. O "apply(0)" insere o
					parametro para operado nesses lambdas.

aoQuadrado.compose(vezesDois).apply(0) = Executa o lambda "vezesDois", gera o resultado, esse resultado vira entrada para 
					 o outro lambda "aoQuadrado" e depois gera o resultado. O "apply(0)" insere o
					 parametro para operado nesses lambdas.

BINARY OPERATOR E BIFUNCTION:

public static void main(String[] args) {
		
	//BINARY OPERATOR		(T,T) -> T (TDS do mesmo tipo)
	//BIFUNCTION		    (T,U) -> R (todos de tipos diferentes)
		
	BinaryOperator<Double> media = (n1,n2) -> (n1 + n2)/2;
		
	System.out.println(media.apply(9.0, 7.0));
		
	BiFunction<Double, Double, String> resultado = (n1,n2) -> 
								(n1 + n2)/2 >= 6.0 ? "Aprovado" : "Reprovado";
											
	System.out.println(resultado.apply(7.0, 8.0));
		
	/*Outro modo:
	Function<Double, String> aprovOuReprov = valor -> valor >= 6.0 ? 
								"Aprovado" : "Reprovado";
		
	System.out.println(media.andThen(aprovOuReprov).apply(9.0, 7.0));
	*/
}

METODOS BINARY OPERATOR: MESMOS METODOS DO UNARY OPERATOR!

FUNCTION:

public static void main(String[] args) {
		
		//FUNCTION			    S -> T (os dois de tipos diferentes)
		//Funcao<T, R> tem entrada um tipo qlq e retorna um tipo qlq!!
		
		Function<Integer, String> parOuImpar = 
				numero -> numero % 2 == 0 ? "Par" : "Impar";
				
		System.out.println(parOuImpar.apply(30));
		
		Function<String, String> oResultadoE =
				valor -> "O resultado é: " + valor;
				
		Function<String, String> empolgado =
				valor -> valor + "!!!";
				
		//Composicao de funcoes:
		//Para composicao de funcoes, a saida de uma irá ser a entrada de outra!!
		// a funcao andThen() coloca outra funcao para compor tambem a variavel!!

		String resultadoFinal = parOuImpar
						  .andThen(oResultadoE)
						  .andThen(empolgado)
						  .apply(30);

		System.out.println(resultadoFinal);
}

METODOS FUNCTION: OS MESMOS METODOS DO UNARY OPERATOR.

