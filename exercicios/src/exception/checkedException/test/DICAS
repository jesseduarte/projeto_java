EXCEÇÕES CHECADAS: 

Que deve ser tratada, nao compila senao tratar!!

Ou usa um try-catch ou usa um throws.

Ex excecoes checadas: IOEXCEPTION, SQLEXCEPTION, ETC.

EX:

public static void criarArquivo() throws IOException{ //agora a responsabilidade de tratar a excecao é do metodo 
                                                      main, pq irei chamar o método nele e nao tratei a excecao
						      no metodo criarArquivo(), apenas coloquei na assinatura dele.                        

		File file = new File("C:/projeto_java/exercicios/src/teste.txt");
		System.out.println("Arquivo criado: " + file.createNewFile());
		System.out.println("Arquivo criado");
}

public static void main(String[] args) {
		
	try {
		criarArquivo();
	}catch(IOException e) {
		e.printStackTrace(); //imprime a pilha de erro.
	}
}

Ex:

public static void abrirArquivo() {

	try {
		System.out.println("Abrindo um arquivo");
		System.out.println("Executando a leitura do arquivo");
		System.out.println("Escrevendo no arquivo");
	} catch(Exception e) {
		e.printStackTrace();
	} finally { //Sempre será executado, independentemente se cair no try ou catch!!
		System.out.println("Fechar o arquivo"); //sempre colocar a liberacao dos recursos aqui!! Até pra BD!!
	}
}
ALGUNS METODOS DA EXCEPTION:

e.printStackTrace() = imprime a pilha toda de excecoes.
e.getStackTrace()[1] = divide a pilha toda em um array e com isso exibe cada parte em indice.
e.getMessage() = imprime somente a excecao.
 
EXCECOES NÃO CHECADAS:

Ex: IllegalArgumentException(), AritmethicException(), NullPointerException(), ArrayIndexOutOfBoundException()

USAR O TRY-CATCH!

Ex:

private static void divisao(int num1, int num2) {
	if(num2 == 0) {
		throw new IllegalArgumentException("Passe um numero diferente de zero!"); 
			//throw é para lançar algo. throw new ... ele está lançando um objeto do tipo Illegal...
	}
	int result = num1/num2;
	System.out.println(result);
}

try {
	divisao(10,0);
}catch(RuntimeException e) {
	System.out.println(e.getMessage()); //pega a mensagem do Illegal e exibe!!
	e.printStackTrace();
}

Usando o try-with-resources:

Ele é usado para fechar os recursos automaticamente sem precisar se preocupar com isso!
Nao precisa mais colocar o close() e nem fechar conexao no bloco finally{}!!

Ex:

try(BufferedWriter bw = new BufferedWriter(new FileWriter(file));
	BufferedReader br = new BufferedReader(new FileReader(file))) {
	....
}