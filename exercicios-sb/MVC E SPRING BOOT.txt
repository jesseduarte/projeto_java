MVC:

MODEL = É O CORACAO DA APLICACAO. ONDE FICAM AS REGRAS DE NEGOCIO, VALIDACOES, 
ENTIDADES E A CAMADA DE ACESSO A DADOS.

VIEW = RESPONSAVEL POR RENDERIZAR A RESPOSTA DA REQUISICAO. ESSA RENDERIZACAO É FEITA
POR HTML, CSS, JAVASCRIPT, ALGUMA TEMPLATE ENGINE.

NO MEIO DOS DOIS (MODEL E VIEW) TEM UM CONTROLADOR DAS REQUISICOES QUE É O CONTROLLER!

CONTROLLER = DESDE PEGAR AS INFORMACOES DO MODEL, TRABALHA NELA E DEPOIS JOGA NA VIEW;

FLUXO DE UMA REQUISICAO EM UMA APLICACAO MVC:

1°) NAO QUERO ACESSAR DADOS NO BD (FLUXO):

Ex: QUERO EXIBIR O MENU NA TELA:

BROWSER(REQ) -> WEB SERVER(Ex: TOMCAT) -> APP -> CONTROLLER -> VIEW -> BROWSER(RESP)!

2°) QUERO ACESSAR DADOS NO BD (FLUXO):

Ex: PRECISO EXIBIR A LISTA DE CLIENTES:

BROWSER(REQ) -> WEB SERVER(Ex: TOMCAT) -> APP -> CONTROLLER -> MODEL -> BD -> MODEL ->
										-> CONTROLLER -> VIEW -> BROWSER(RESP)
										
PADRAO MVC E SPRING BOOT:

QUANDO FOR API, VC NAO PRECISARÁ UTILIZAR A VIEW NO FLUXO:

BROWSER(REQ) -> WEB SERVER(TOMCAT DENTRO DA NOSSA APP SB) -> FRONT CONTROLLER ->
(DEPENDE DA URL) -> C1 OU C2 OU C3 -> MODEL -> BD -> MODEL -> C1 OU C2 OU C3 -> FRONT
CONTROLLER(JSON) -> BROWSER(RESP)

E A VIEW FICARÁ EM OUTRA APLICACAO QUE USARÁ HTML COM JAVASCRIPT (Ex: COM REACT).

FRONT CONTROLLER = NO SPRING É CHAMADO DE DISPATCHERSERVLET. É UMA CLASSE QUE VAI
ATENDER A REQ HTTP. O FC SERÁ CAPAZ DE DIRECIONAR, CONFORME A URL RECEBIDA, PARA O
CONTROLLER CORRETO.